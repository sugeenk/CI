// When we are using try catch with if else 
on failure scenario system is setup to see some exception before going to catch block. So either system can do it OR we need to manually 
throw some exception before going to catch block 

SC01: IFBLOCK Fails and System itself throw some exception ( like elementnotfound etc) , then control will go to catch by it own and we do not need to use else block here. 


SC02: IFBLOCK Fails and System is not able to throw some exception ( normal java code like compare two values etc) , then control will not go to catch by it own 
Then we need to throw some exception manually just before moving to catch block. So we will use ELSEBLOCK after IFBLOCK and throw our exception here. 

TC01: To get system default result for PASS/FAIL 
While accessing these function using Assert.assertTrue(fx) we can directly pass or fail test cases

TC02: To get Customer specific result for PASS/FAIL 
Or While accessing these function using Assert.assertTrue(fx) we can keep it in try catch to print our message using throw new exception   
    
	
************************************Example   
Below code is pure java where we do not have any system excpetion therefor we have created our own excpetion class and 
we are using this exception in our generic function ELSE BLOCK so that code first throw our exception and then go to catch and throw system exception

// create one exception class 	
public class DataInvalidException extends Exception {

    public DataInvalidException(String exceptionMessage) {
        System.out.println(exceptionMessage);

    }
}	
	
// create generic functions like: 

private boolean validateString(String Input) {
        boolean flag = false;
        String Output="Calender";
		if(Output.contains(Input)) {
			return true;
		}
		return flag;
	}
 private boolean validateStringWithTryCatch(String str) {
        boolean flag = false;
        String Output="Calender";
        try {
            if(Output.contains(str)) {
                System.out.println("successful");
                flag=true;
            }
            else {
                System.out.println("ElseCaught");
                throw new DataInvalidException("Wrong String");
            }

        }catch (DataInvalidException e) {

            System.out.println("we have some exception here-----------" + e.getMessage());

        }
        return flag;
    }


// now call these functions in our test classes
@Test
	public void testBoolean01() throws Exception {

        try {
            Assert.assertTrue(validateStringWithTryCatch(ExcelHelper.ReadExcelData("RebookTestData", "data", "TC00_Date")));
        }
        catch(Exception e){
            throw new Exception("test case could not be executed so please check test data file or some other reason");
        }

	}
	
	
@Test
	public void testBoolean02() throws Exception {
    
            Assert.assertTrue(validateStringWithTryCatch(ExcelHelper.ReadExcelData("RebookTestData", "data", "TC00_Date")));
         
	}	
	


//Note: When test cases get failed while using asserion methods then system itselft throw failure exception But in case we want to throw customer specific exceptions 
then we need to use put assertion in try BLOCK and we provide our comments in CATCH BLOCK by throwing exception manually eg: 
		try {
            Assert.assertTrue(validateStringWithTryCatch(ExcelHelper.ReadExcelData("RebookTestData", "data", "TC00_Date")));
        }
        catch(Exception e){
            throw new Exception("test case could not be executed so please check test data file or some other reason");
        }





